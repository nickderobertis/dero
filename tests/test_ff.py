from context import dero

import dero.data.ff.create.sort as ff_sort

import pandas as pd
from pandas.util.testing import assert_frame_equal
from pandas import Timestamp
from numpy import nan
import numpy
import datetime


class DataFrameTest:
    df_3_fac = pd.DataFrame([
        (10516, 'a', '1/1/2000', 1.01, .51, 1000),
        (10516, 'a', '1/2/2000', 1.02, .52, 2000),
        (10516, 'a', '1/3/2000', 1.03, .53, 3000),
        (10516, 'a', '1/4/2000', 1.04, .54, 4000),
        (10516, 'b', '1/1/2000', 1.05, 1.55, 50000),
        (10516, 'b', '1/2/2000', 1.06, 1.56, 60000),
        (10516, 'b', '1/3/2000', 1.07, 1.57, 70000),
        (10516, 'b', '1/4/2000', 1.08, 1.58, 80000),
        (10517, 'a', '1/1/2000', 1.09, .59, 9000),
        (10517, 'a', '1/2/2000', 1.10, .60, 10000),
        (10517, 'a', '1/3/2000', 1.11, .61, 11000),
        (10517, 'a', '1/4/2000', 1.12, .62, 12000),
        (10517, 'b', '1/1/2000', 1.13, .63, 13000),
        (10517, 'b', '1/2/2000', 1.14, .64, 14000),
        (10517, 'b', '1/3/2000', 1.15, .65, 15000),
        (10517, 'b', '1/4/2000', 1.16, .66, 16000),
        (10518, 'a', '1/1/2000', 1.17, .67, 17000),
        (10518, 'a', '1/2/2000', 1.18, .68, 18000),
        (10518, 'a', '1/3/2000', 1.19, .69, 19000),
        (10518, 'a', '1/4/2000', 1.20, .70, 20000),
        (10518, 'b', '1/1/2000', 1.21, .71, 21000),
        (10518, 'b', '1/2/2000', 1.22, .72, 22000),
        (10518, 'b', '1/3/2000', 1.23, .73, 23000),
        (10518, 'b', '1/4/2000', 1.24, .74, 24000),
    ], columns=['PERMNO', 'byvar', 'Date', 'RET', 'be/me', 'me'])
    df_3_fac['Date'] = pd.to_datetime(df_3_fac['Date'])


class TestCalculateFFFactors(DataFrameTest):

    def test_create_portfolios(self):
        expect_df = pd.DataFrame(data=[
            (10516, 'a', Timestamp('2000-01-01 00:00:00'), 1.01, 0.51, 1000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'a', Timestamp('2000-01-02 00:00:00'), 1.02, 0.52, 2000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'a', Timestamp('2000-01-03 00:00:00'), 1.03, 0.53, 3000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'a', Timestamp('2000-01-04 00:00:00'), 1.04, 0.54, 4000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'b', Timestamp('2000-01-01 00:00:00'), 1.05, 1.55, 50000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'b', Timestamp('2000-01-02 00:00:00'), 1.06, 1.56, 60000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'b', Timestamp('2000-01-03 00:00:00'), 1.07, 1.57, 70000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10516, 'b', Timestamp('2000-01-04 00:00:00'), 1.08, 1.58, 80000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'a', Timestamp('2000-01-01 00:00:00'), 1.09, 0.59, 9000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'a', Timestamp('2000-01-02 00:00:00'), 1.1, 0.6, 10000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'a', Timestamp('2000-01-03 00:00:00'), 1.11, 0.61, 11000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'a', Timestamp('2000-01-04 00:00:00'), 1.12, 0.62, 12000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'b', Timestamp('2000-01-01 00:00:00'), 1.13, 0.63, 13000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'b', Timestamp('2000-01-02 00:00:00'), 1.14, 0.64, 14000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'b', Timestamp('2000-01-03 00:00:00'), 1.15, 0.65, 15000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10517, 'b', Timestamp('2000-01-04 00:00:00'), 1.16, 0.66, 16000, 1, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'a', Timestamp('2000-01-01 00:00:00'), 1.17, 0.67, 17000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'a', Timestamp('2000-01-02 00:00:00'), 1.18, 0.68, 18000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'a', Timestamp('2000-01-03 00:00:00'), 1.19, 0.69, 19000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'a', Timestamp('2000-01-04 00:00:00'), 1.2, 0.7, 20000, 3, Timestamp('2000-01-01 00:00:00'), 2,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'b', Timestamp('2000-01-01 00:00:00'), 1.21, 0.71, 21000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'b', Timestamp('2000-01-02 00:00:00'), 1.22, 0.72, 22000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'b', Timestamp('2000-01-03 00:00:00'), 1.23, 0.73, 23000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
            (10518, 'b', Timestamp('2000-01-04 00:00:00'), 1.24, 0.74, 24000, 2, Timestamp('2000-01-01 00:00:00'), 1,
             Timestamp('2000-01-01 00:00:00')),
        ], columns=['PERMNO', 'byvar', 'Date', 'RET', 'be/me', 'me', 'be/me Portfolio',
                    'be/me Portfolio Formation Date', 'me Portfolio', 'me Portfolio Formation Date'])

        result = ff_sort.create_portfolios(
            self.df_3_fac,
            groupvar_ngroups_dict={
                'be/me': 3,
                'me': 2
            },
            byvars='byvar',
            id_var='PERMNO',
            date_var='Date'
        )

        assert_frame_equal(result, expect_df, check_dtype=False)

        self.df_3_fac_ports = result